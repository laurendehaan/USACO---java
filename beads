/*
ID: laurend1
TASK: beads
LANG: JAVA
*/

//              NAME:   Lauren DeHaan
//             CLASS:   APCS
//     LAST MODIFIED:   3 November 2019
//        PROBLEM ID:   USACO Broken Necklace
//       DESCRIPTION:   This program inputs a number of beads and a
//                      string of their colors and determines which 
//			               order to arrange the beads around certain parameters.
//      SOURCES/HELP:   USACO, Mr. Houtrouw, Java API

import java.io.*;
import java.util.*;

public class beads
{
  public static void main(String[] args) throws IOException
  {
       // Opens files for input and output
       Scanner scan = new Scanner(new File("beads.in"));
       PrintWriter out = new PrintWriter(new File("beads.out"));
   
       // Declares variables
       int twoN, n, sum = 0, max = 0;
       char[] beads = new char[1000];
       char[] colors = new char[1000];
       
       // Reads in necklace length and doubles it
       n = scan.nextInt();
       twoN = 2 * n;
       
       //Inputs colors of the necklace
       colors = scan.next().toCharArray();
   
       // Create array for individual beads
       for (int q = 0; q < twoN; q++)
       {
           beads[q] = colors[q % n];
       }
       
       // Create arrays for every color to the furthest left and right (1000)
       int[] redLeft = new int[1000];
       int[] redRight = new int[1000];
       int[] blueLeft = new int[1000];
       int[] blueRight = new int[1000];
       
       // Initializes left arrays
       redLeft[0] = blueLeft[0] = 0;
       
       // Tests left side arrays
       for (int q = 1; q <= twoN; q++)
       {
           // If the broken spot is blue, sets value of blue to tested value plus 1
           if (beads[q - 1] == 'b')
           {
               blueLeft[q] = blueLeft[q - 1] + 1;
               redLeft[q] = 0;
           }
           // If the broken spot is red, sets value of red to tested value plus 1
           else if (beads[q - 1] == 'r')
           {
               redLeft[q] = redLeft[q - 1] + 1;
               blueLeft[q] = 0;
           }
           // If broken spot is white, no change
           else if (beads[q - 1] == 'w')
           {
               blueLeft[q] = blueLeft[q - 1] + 1;
               redLeft[q] = redLeft[q - 1] + 1;
           }
       }
       
       // Initializes right side arrays
       blueRight[twoN] = redRight[twoN] = 0;
       
       // Checks right side arrays
       for (int q = (twoN - 1); q >= 0; q--)
       {
           // If the broken spot is blue, sets value of blue to tested value plus 1
           if (beads[q] == 'b')
           {
               blueRight[q] = blueRight[q + 1] + 1;
               redRight[q] = 0;
           }
           // If the broke spot is red, sets value of red to tested value plus 1
           else if (beads[q] == 'r')
           {
               redRight[q] = redRight[q + 1] + 1;
               blueRight[q] = 0;
           }
           //If broken spot is white, no change
           else if (beads[q] == 'w')
           {
               blueRight[q] = blueRight[q + 1] + 1;
               redRight[q] = redRight[q + 1] + 1;
           }
       }
       
       // Finds and outputs the max size string of beads from either side
       for (int q = 0; q < twoN; q++)
       {
           // Uses math max function
           sum = Math.max(blueLeft[q], redLeft[q]) + Math.max(blueRight[q], redRight[q]);
           if (sum > max)
           {
               max = sum;
           }
           if (n < max)
           {
               max = n;
           }
       }
       out.println(max);
       
       //Ends program
       out.close();
   }
}