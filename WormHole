/*
ID: laurend1
TASK: wormhole
LANG: JAVA
*/

//              NAME:   Lauren DeHaan
//             CLASS:   APCS
//     LAST MODIFIED:   3 November 2019
//        PROBLEM ID:   USACO wormhole
//       DESCRIPTION:   This program determines the route of a cow which
//                      would cause her to become stuck in an infinite
//			               loop of wormholes.
//      SOURCES/HELP:   USACO, Mr. Houtrouw, Java API, Wormhole explanation video

import java.io.*;
import java.util.*;

public class wormhole
{
    // Declares variables and arrays
    static int n;
    static int[][] a= new int[13][2]; 
    static int[] b = new int[13];
    static int[] c = new int[13];

    public static void main (String[] args) throws IOException
    {
        // Opens files for inputs and outputs
        Scanner scan = new Scanner(new File("wormhole.in"));
        PrintWriter out = new PrintWriter(new File("wormhole.out"));
        
        // Reads in number of wormholes, then x and y values
        n = scan.nextInt();
        for (int j = 1;j <= n ;j++)
        {
            a[j][0] = scan.nextInt();		
            a[j][1] = scan.nextInt();		
        }

        // Checks if the cow will get stuck
        for (int i=1;i<=n;i++)
        {
            for (int j=1;j<=n;j++)
            {
                if (a[j][0] > a[i][0] && a[i][1] == a[j][1])
                {
                    if (c[i]==0 || a[j][0]-a[i][0] < a[c[i]][0] - a[i][0])
                    {
                        c[i]=j;
                    }
                }
            }
        }

        out.println(dfs());
        out.close();    
    }

    // Checks when to stop recursion
    public static boolean check()
    {
        for (int i=1;i<=n;i++)
        {
            int val=i;

            for (int j=0;j<n;j++)
            {
                val = c[b[val]];
            }
            if (val!=0)
            {
                return true;
            }
        }

        return false;
    }

    // Finds how many possible points there are recursively
    public static int dfs()
    {
        int i=0, sum=0;
        for (i=1;i<=n;i++)
        {
            if (b[i]==0)
            {
                break;
            }
        }

        if (i>n)
        {
            if (check())
            {
                return 1;
            }
            else
            {
                return 0;
            }    		
        }

        for (int j=i+1;j<=n;j++)
        {
            if (b[j]==0)
            {
                b[i]=j;
                b[j]=i;
                sum+=dfs();
                b[i]=0;
                b[j]=0;
            }
        }
        return sum;
    }
}